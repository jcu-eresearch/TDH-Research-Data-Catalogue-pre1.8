<script type="text/javascript" src="$portalPath/js/autocomplete/jquery.autocomplete.pack.js"></script>
<script src="$portalPath/js/wizard.js"></script>

<style>
.containerLayout .jaffaListItem > div > div {
    display:inline-block;
    margin-right : 1em;
    
}

.containerLayout .jaffaListItem > div > div {
    vertical-align: top;
}

input:focus, textarea:focus, select:focus {
  box-shadow: 0 0 5px rgba(81, 203, 238, 1);
  padding: 3px 0px 3px 3px;
  margin: 5px 1px 3px 0px;
  border: 1px solid rgba(81, 203, 238, 1);

}

.component-wrapper .widgetLabel {
    display:block;
}

.component-wrapper .peopleWidgetLabel{
    display:inline;
    padding-right:0.3em;
    padding-left:0.3em;
}

.rights {
    display: inline-block;
    margin-right: 0.5em;
}

.jcuFieldLabel {
    font-size: 105%;
    font-weight: bold;
}

.mintNlaLookup {
    padding-right:1em;
    padding-left:1em;
}
</style>

<script type="text/javascript">
//Grants
function splitGrantData(row) {
    var items = row[0].split("::");
    var id = items[0];
    var uri = items[3];
    var label = items[1];
    var source = items[2];
    return {
        id: id,
        uri: uri,
        label: label,
        source: source,
        display: "[" + id + "] (" + source + ") " + label
    };
}

function addAutocompleteGrant(elem) {
    elem.autocomplete(
        "$portalPath/proxyGet.script?ns=Activities&autocomplete=true&fields=grant_number,dc:title,repository_name,dc:identifier",
        {
            extraParams: {
                qs: function() { return "count=2500&searchTerms=" + escape(elem.val().toLowerCase()); }
            },
            formatItem: function(row) { return splitGrantData(row).display; },
            formatResult: function(row) { return splitGrantData(row).id; },
            mustMatch: true,
            width: "40em",
            max:2500
        }).result(function(event, row) {
            var uri = $(this).parent().next().find(".autocomplete-grant-identifier")
            var label = $(this).parent().next().next().find(".autocomplete-grant-label")
            if (row) {
                var data = splitGrantData(row);
                label.val("(" + data.source + ") " + data.label);
                uri.val(data.uri);
            }
        });
}

$(".internal-grant").live("click", function() {
    var checked = $(this).is(":checked");
    var baseId = $(this).attr("id").replace(".redbox:internalGrant", "");
    var idElemField = baseId + '.redbox:grantNumber';
    var idElem = $("input[id='" + idElemField + "']");
    var labelElemField = baseId + '.skos:prefLabel';
    var labelElem = $("input[id='" + labelElemField + "']");
    var uriElemField = baseId + '.dc:identifier';
    var uriElem = $("input[id='" + uriElemField + "']");
    var uri = uriElem.val();
    if (uri == INTERNAL_GRANT_ID) {
        if (labelElem.val() == "" ||
                confirm("The selected grant will be cleared.\nAre you sure you want to change it to an external grant?")) {
            idElem.val("");
            addAutocompleteGrant(idElem);
            labelElem
                .addClass("label")
                .attr("readonly", "readonly")
                .val("");
            uriElem.val("");
            return true;
        }
    } else {
        if (uri == "" ||
                confirm("The selected grant will be cleared.\nAre you sure you want to change it to an internal grant?")) {
            idElem.unautocomplete().val("");
            labelElem
                .removeClass("label")
                .removeAttr("readonly")
                .val("");
            uriElem.val(INTERNAL_GRANT_ID);
            return true;
        }
    }
    return false;
});

$(".autocomplete-grant").live("focus", function() {
    var baseId = $(this).attr("id").replace(".redbox:grantNumber", "");
    var baseIdField = baseId + '.redbox:internalGrant';    
    if (!$("input[id='" + baseIdField + "']").is(":checked")) {
        $(this).unautocomplete();
        addAutocompleteGrant($(this));
    }
});

//Research Themes
$(".clearNotAligned").click(function() {
    $("#jcu\\:research\\.themes\\.notAligned").attr('checked', false);
});

$(".clearOtherSelections").click(function() {
    $("#jcu\\:research\\.themes\\.tropicalEcoSystems").attr('checked', false);
    $("#jcu\\:research\\.themes\\.industriesEconomies").attr('checked', false);
    $("#jcu\\:research\\.themes\\.peopleSocieties").attr('checked', false);
    $("#jcu\\:research\\.themes\\.tropicalHealth").attr('checked', false);});

//Buttons
$(".nexttab").click(function() {

    var validationPassed = validateTab(); 

    if(validationPassed) {
        jaffa.form.save(true);
        var active = $("#simpleworkflow-form").tabs("option", "selected");
        $("#simpleworkflow-form").tabs("option", "selected", active + 1);
    }
});

$(".prevtab").click(function() {

    var validationPassed = validateTab(); 

    if(validationPassed) {
        jaffa.form.save(true);
        var active = $("#simpleworkflow-form").tabs("option", "selected");
        $("#simpleworkflow-form").tabs("option", "selected", active - 1);
    }
});

$("button[form-action='save']").click(function() {

    var label = $("[id='dc:language.dc:identifier']").find(":selected").text();
    $("[id='dc:language.skos:prefLabel']").val(label);
    jaffa.form.synch(false);
    transition_click(this);
});

function splitData(row) {
    var items = row[0].split("::");
    return {
        oid: items[0],
        title: items[1]
    };
}

$(".collectionTitleLookup").live("focus", function(){
    var elem = $(this);
    var baseId = elem.attr("id").replace(".dc:title", "");
    elem.unautocomplete();
    if (getReDBoxById(baseId+".redbox:origin").is(":checked")){
        elem.autocomplete(
            "$portalPath/actions/datasets.ajax?",
            {
                extraParams: {
                    qs: function() {
                        return "$oid";
                    }
                },
                formatItem: function(row) {return splitData(row).title;},
                formatResult: function(row) {return splitData(row).title;},
                width: "40em"
            }).result(function(event, row) {
                if (row) {
                    var data = splitData(row);
                    getReDBoxById(baseId+".dc:identifier").val(data.oid);
                }
            })
    }
}).live("blur", function(){
    $(this).search();
});

function splitService(row) {
    var items = row[0].split("::");
    return {
        title: items[0],
        id: items[1]
    };
}
    
$(".serviceTitleLookup").live("focus", function(){
    var elem = $(this);
    var baseId = elem.attr("id").replace(".dc:title", "");
    elem.unautocomplete();
    elem.autocomplete(
        "$portalPath/proxyGet.script?ns=Services&autocomplete=true&fields=dc:title,dc:identifier",
        {
            extraParams: {
                qs: function() { return "count=25&searchTerms=" + escape(elem.val().toLowerCase()); }
            },
            formatItem: function(row) { return splitService(row).title; },
            formatResult: function(row) { return splitService(row).title; },
            width: "40em"
        }).result(function(event, row) {
            if (row) {
                var data = splitService(row);
                getReDBoxById(baseId+".dc:identifier").val(data.id);
            }
        })
}).live("blur", function(){
    $(this).search();
});

</script>

<script type="text/javascript">
#set($defaultIternal = "internal:id")
#set($iternalId = $systemConfig.getString($defaultIternal, "redbox.identity", "internalGrantString"))
#set($portalPath = $portalPath)
var INTERNAL_GRANT_ID = "$iternalId";
var widgetTabs;

function pad(s,len,c){
    c = c || "0";
    var ps = s.toString();
    while(ps.length<len){ ps = c + ps; }
    return ps;
}
function getDate(){
    var d = new Date();
    var s = d.getFullYear()+"-"+pad(d.getMonth()+1,2)+"-"+pad(d.getDate(),2);
    return s;
}
function getDateTime(){
    var d = new Date();
    var s = getDate()+" "+pad(d.getHours(),2)+":"+pad(d.getMinutes(),2)+":"+pad(d.getSeconds(),2);
    return s;
}

(function($){
    // OpenLayers stylesheets
    $('head').append('<link rel="stylesheet" type="text/css" id="openLayersCss1">');
    $('#openLayersCss1').attr('href', '$portalPath/openlayers/theme/default/style.css');
    $('head').append('<link rel="stylesheet" type="text/css" id="openLayersCss2">');
    $('#openLayersCss2').attr('href', '$portalPath/openlayers/redbox.css');

    $(function(){
            // OpenLayers init, store it globally so the Geonames lookup can hit it later
            window["openLayersMap"] = loadOpenLayers();
    });
})(jQuery);
</script>

<script type="text/javascript">

    function hide_no_option() { 
  		document.getElementById('delegation_sec').style.display='none';
	} 

	function show_no_option() { 
		document.getElementById('delegation_sec').style.display='block'; 
	}
	
	function repeat_div(div_class) {
		var divs = $("."+div_class);
		
	}

    var selfSubmission = {
        submit_hidden: true,
        toggle_submit: function () {
            if($("[id='readyforreview.1']").attr('checked') == null) { 
                $("[transition-name='Submit']").hide(); 
            } else {
               $("[transition-name='Submit']").show();
            }
        }
        
    };

	$(document).ready(function() {
   		$(widgets.contentLoaded);
        
        // hide Submit link until user acknowledges 
        $("[transition-name='Submit']").hide();
        $("[id='readyforreview.1']").change(selfSubmission.toggle_submit);  
        prepareHelps();

        //setting up the classes for Access Rights/Conditions
        $('#accessRight-selection').css("width", "375px");
        $('#accessRight-selection').parent().addClass('rights');
        $('#accessRight-selection').parent().next().addClass('rights');
        $('#accessRight-selection').parent().next().next().addClass('rights');
        $('#dc\\:accessRights\\.dc\\:identifier-container').parent().addClass('rights');
        $("[id='dc:accessRights.skos:prefLabel']").hide();        

        $('#dc\\:accessRights\\.dc\\:RightsStatement\\.skos\\:prefLabel-container').parent().addClass('rights');
        $('#dc\\:accessRights\\.dc\\:RightsStatement\\.skos\\:prefLabel-container').parent().next().addClass('rights');
        $('#dc\\:accessRights\\.dc\\:RightsStatement\\.dc\\:identifier-container').parent().addClass('rights');

        //Rights
        $("#accessRight-selection").change(function(){
            var comboValue = $(this).val();
            if  (comboValue == 'manual'){
                $("[id='dc:accessRights.skos:prefLabel']").val("");
                $("[id='dc:accessRights.skos:prefLabel']").show()                
            }
            else{
                $("[id='dc:accessRights.skos:prefLabel']").val(comboValue);
                $("[id='dc:accessRights.skos:prefLabel']").hide();
            }
        });
        
        //make the Grants Title field readonly
        $().attr("readonly", "readonly");
    })
    
//****
//**** The following script is required for the GeoNames processing associated with the OpenStreeMap
//****
    function cleanRdfToJs(input) {
        var output = input.replace(/\./g, "\\.");
        return output.replace(/\:/g, "\\:");
    }

    function getReDBoxById(redboxId) {
        var cleanId = cleanRdfToJs(redboxId);
        return $("#" + cleanId);
    }

$(function(){
    function splitGeonamesData(row) {
        var items = row[0].split("::");
        return {
            id: items[0],
            uri: items[1],
            display: items[2],
            north: items[3],
            east: items[4]
        };
    }
    
    $("#add-location").click(function(){
        getReDBoxById("dc:coverage.vivo:GeographicLocation.0.coords").hide();
    });
           
    $("#geonamesLookup").live("focus", function(){
        var elem = $(this);
        elem.unautocomplete();
            elem.autocomplete(
                "$portalPath/proxyGet?ns=Geonames&autocomplete=true&fields=id,geonames_uri,display,latitude,longitude",
                {
                    extraParams: {
                        qs: function() {
                            var userInput = elem.val();
                            var commaPos = userInput.indexOf(",");
                            if(commaPos!=-1){
                                userInput = userInput.substring(0,commaPos);
                            }
                            return "func=search&format=json&rows=25&q=" + escape(userInput);
                        }
                    },
                    formatItem: function(row) { return splitGeonamesData(row).display; },
                    formatResult: function(row) { return splitGeonamesData(row).display; },
                    width: "40em"
                }).result(function(event, row) {
                    if (row) {
                        var data = splitGeonamesData(row);
                        // Pan OpenLayers Map
                        if (window["openLayersMap"] != null) {
                            window["openLayersMap"].panTo(data.east, data.north, 10);
                        }
                    }
                })
        }).live("blur", function(){
            $(this).search();
        });

    $(".autocomplete-geonames").live("focus", function(){
        var elem = $(this);
        var baseId = elem.attr("id").replace(".rdf:PlainLiteral", "");
        var wktElem = getReDBoxById(baseId+".redbox:wktRaw");
        elem.unautocomplete();
        if(getReDBoxById(baseId+".dc:type").val() == "text" && wktElem.val() == ""){
            elem.autocomplete(
                "$portalPath/proxyGet?ns=Geonames&autocomplete=true&fields=id,geonames_uri,display,latitude,longitude",
                {
                    extraParams: {
                        qs: function() {
                            var userInput = elem.val();
                            var commaPos = userInput.indexOf(",");
                            if(commaPos!=-1){
                                userInput = userInput.substring(0,commaPos);
                            }
                            return "func=search&format=json&rows=25&q=" + escape(userInput);
                        }
                    },
                    formatItem: function(row) { return splitGeonamesData(row).display; },
                    formatResult: function(row) { return splitGeonamesData(row).display; },
                    width: "40em"
                }).result(function(event, row) {
                    if (row) {
                        var data = splitGeonamesData(row);
                        var coordsElem = getReDBoxById(baseId+".coords");
                        getReDBoxById(baseId+".dc:identifier").val(data.uri);
                        getReDBoxById(baseId+".geo:long").val(data.east);
                        getReDBoxById(baseId+".geo:lat").val(data.north);
                        coordsElem.find(".east").text(data.east);
                        coordsElem.find(".north").text(data.north);
                        coordsElem.show();
                    }
                })
            }
        }).live("blur", function(){
            $(this).search();
        });

    $(".map-link").live("click", function(){
        var p = $(this).parent();
        var baseId = p.attr("id").replace(".coords", "");
        var long = getReDBoxById(baseId+".geo:long").val();
        var lat = getReDBoxById(baseId+".geo:lat").val();
        window["openLayersMap"].panTo(long, lat, 10);
        return false;
    });

    $(".clear-link").live("click", function(){
        var p = $(this).parent();
        var baseId = p.attr("id").replace(".coords", "");
        getReDBoxById(baseId+".dc:identifier").removeAttr("value");
        getReDBoxById(baseId+".geo:long").removeAttr("value");
        getReDBoxById(baseId+".geo:lat").removeAttr("value");
        p.hide();
    });

    var lastTypeValue;
    $(".locationType").live("focus", function() {
        // This is only really useful on the first use of the drop-down
        lastTypeValue = $(this).val();
    }).live("change", function(e){
        var elem = $(this);
        var baseId = elem.attr("id").replace(".dc:type", "");
        var wktElem = getReDBoxById(baseId+".redbox:wktRaw");
        var wktString = wktElem.val();
        // OpenLayers Row
        if (wktString != "") {
            var outElem = getReDBoxById(baseId+".rdf:PlainLiteral");
            var type = elem.val();
            // The alert window causes focus changes... use this temp variable instead
            var lastType = lastTypeValue;
            var output = window["openLayersMap"].mapWktData(wktString, type);
            if (output != null) {
                outElem.val(output);
                // Fix the focus loss from the alert
                lastTypeValue = type;
            } else {
                elem.val(lastType);
                // Fix the focus loss from the alert
                lastTypeValue = lastType;
                return;
            }

        // Legacy input
        } else {
            var uriElem = getReDBoxById(baseId+".dc:identifier");
            if(elem.val() != "text" && uriElem.val() != ""){
                if (confirm("Are you sure you want to clear the Geonames linked location?")) {
                    getReDBoxById(baseId+".rdf:PlainLiteral").val("");
                    $("div[id='"+baseId+".coords'] .clear-link").click();
                } else {
                    $(this).val("text");
                }
            }
        }
    });
});
</script>
